name: Build & Release NanoBin

permissions:
  contents: write

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**/*.md'
      - '**/*.txt'
      - 'LICENSE'
      - '**/*.ico'
      - '**/*.png'
      - '**/*.jpg'
      - '**/*.svg'

jobs:
  build:
    runs-on: windows-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}

    steps:
      - name: üßæ Checkout repository
        uses: actions/checkout@v4

      - name: üîç Extract version from AssemblyInfo.cs
        id: get_version
        shell: pwsh
        run: |
          $line = Select-String -Path ./Properties/AssemblyInfo.cs -Pattern 'AssemblyVersion\("([0-9\.]+)"\)'
          if ($line.Matches.Count -eq 0) {
              Write-Error "AssemblyVersion not found!"
              exit 1
          }
          $version = $line.Matches[0].Groups[1].Value
          echo "version=$version" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: üõ† Set up MSBuild
        uses: microsoft/setup-msbuild@v1.3.1

      - name: üì¶ Restore NuGet packages
        run: nuget restore NanoBin.sln

      - name: ‚öôÔ∏è Build solution
        run: msbuild NanoBin.sln /p:Configuration=Release

      - name: üß≥ Archive build output
        run: |
          mkdir output
          Copy-Item -Path .\bin\Release\* -Destination output\ -Force -Recurse
          Compress-Archive -Path output\* -DestinationPath NanoBin.zip

      - name: ‚¨ÜÔ∏è Upload artifact to Actions
        uses: actions/upload-artifact@v4
        with:
          name: NanoBin-Windows
          path: NanoBin.zip

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: NanoBin-Windows

      - name: Get version from build job
        run: echo "Version is ${{ needs.build.outputs.version }}"

      - name: Check for existing tag
        id: check_tag
        run: |
          TAG="v${{ needs.build.outputs.version }}"
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create tag if not exists
        if: steps.check_tag.outputs.exists == 'false'
        run: |
          TAG="v${{ needs.build.outputs.version }}"
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag "$TAG"
          git push origin "$TAG"

      - name: Read changelog for this version
        id: changelog
        run: |
          VERSION="v${{ needs.build.outputs.version }}"
          # –ò—â–µ–º —Å–µ–∫—Ü–∏—é –¥–ª—è —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏, –¥–æ —Å–ª–µ–¥—É—é—â–µ–π —Å–µ–∫—Ü–∏–∏ –∏–ª–∏ –∫–æ–Ω—Ü–∞ —Ñ–∞–π–ª–∞
          # –ú–µ–Ω—è–µ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –Ω–∞ —Å–≤–æ–π —Å—Ç–∏–ª—å!
          TEXT=$(awk "/^## \\[?$VERSION\\]?/ {flag=1;next} /^## /{flag=0} flag" CHANGELOG.md | sed '/^[[:space:]]*$/d')
          echo "body<<EOF" >> $GITHUB_OUTPUT
          echo "$TEXT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.build.outputs.version }}
          name: NanoBin v${{ needs.build.outputs.version }}
          body: ${{ steps.changelog.outputs.body }}
          files: NanoBin.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
